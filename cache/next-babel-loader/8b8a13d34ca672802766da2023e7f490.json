{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport jwt from 'next-auth/jwt';\n\nconst getSessionToken = (cookies, cookieName) => {\n  const secureCookieName = '__Secure-next-auth.session-token';\n  const insecureCookieName = 'next-auth.session-token';\n  return cookieName ? cookies[cookieName] : cookies[secureCookieName] || cookies[insecureCookieName];\n};\n\nconst parseCookies = string => {\n  // console.log(string);\n  if (!string) {\n    return {};\n  }\n\n  try {\n    const object = {};\n    const a = string.split(';');\n\n    for (let i = 0; i < a.length; i++) {\n      const b = a[i].split('=');\n\n      if (b[0].length > 1 && b[1]) {\n        object[b[0].trim()] = decodeURIComponent(b[1]);\n      }\n    }\n\n    return object;\n  } catch (error) {\n    return {};\n  }\n};\n\nconst getOriginalJwt = ({\n  req,\n  secret,\n  cookieName\n}) => {\n  if (!req || !secret) throw new Error('Must pass { req, secret } to getJWT()');\n  const cookies = parseCookies(req.headers.cookie);\n  const cookieValue = getSessionToken(cookies, cookieName);\n\n  if (!cookieValue) {\n    return null;\n  }\n\n  const decryptedBytes = CryptoJS.AES.decrypt(cookieValue, secret);\n  const token = decryptedBytes.toString(CryptoJS.enc.Utf8);\n  return token;\n};\n\nconst secret = process.env.jwtSecretKey;\nexport default (async (req, res) => {\n  // Automatically decrypts and verifies JWT\n  const payload = await jwt.getJwt({\n    req,\n    secret\n  });\n  const token = getOriginalJwt({\n    req,\n    secret\n  });\n  res.end(JSON.stringify({\n    payload,\n    token\n  }, null, 2));\n});","map":null,"metadata":{},"sourceType":"module"}