{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport tileData from 'src/data/admin/tileData';\nimport Link from 'next/link';\nimport AppBar from 'src/components/admin/appbar';\nimport graphql from './withGraphql';\nimport useData from 'src/data/shared/useData';\nimport { useSubscription } from 'graphql-hooks';\nconst TOTAL_COUNT_SUBSCRIPTION = `\n  subscription ($organization_id:uuid!){\n    totalCount:cms_articles_aggregate(\n      where:{\n        organization_id:{\n          _eq:$organization_id\n        }\n      }\n    ){\n      aggregate { count }\n    }\n  }\n`;\n\nfunction TotalCountComponent({\n  title = ''\n}) {\n  const [count, setCount] = React.useState(0);\n  const [error, setError] = React.useState(null);\n  const {\n    current_organization\n  } = useData();\n  const variables = {\n    organization_id: current_organization.id\n  };\n  useSubscription({\n    query: TOTAL_COUNT_SUBSCRIPTION,\n    variables\n  }, ({\n    data,\n    errors\n  }) => {\n    if (errors && errors.length > 0) {\n      // handle your errors\n      setError(errors[0]);\n      return;\n    } // all good, handle the gql result\n\n\n    setCount(data.totalCount.aggregate.count);\n  });\n\n  if (error) {\n    return __jsx(\"span\", null, \"An error occurred \", error.message);\n  }\n\n  return __jsx(\"span\", null, title, \" (\", count, \")\");\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  }\n}));\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\n\nconst Main = () => {\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(AppBar, null), __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(GridList, {\n    cellHeight: 180,\n    className: classes.gridList\n  }, __jsx(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: 'auto'\n    }\n  }, __jsx(ListSubheader, {\n    component: \"div\"\n  }, \"December\")), tileData.map((tile, index) => __jsx(GridListTile, {\n    key: `${tile.img}-${index}`\n  }, __jsx(Link, {\n    href: tile.link,\n    as: tile.link\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: tile.img,\n    alt: tile.title\n  }))), __jsx(GridListTileBar, {\n    title: __jsx(TotalCountComponent, {\n      title: tile.title\n    }),\n    subtitle: __jsx(\"span\", null, \"by: \", tile.author),\n    actionIcon: __jsx(IconButton, {\n      \"aria-label\": `info about ${tile.title}`,\n      className: classes.icon\n    }, __jsx(InfoIcon, null))\n  }))))));\n};\n\nexport default graphql({})(Main);","map":null,"metadata":{},"sourceType":"module"}