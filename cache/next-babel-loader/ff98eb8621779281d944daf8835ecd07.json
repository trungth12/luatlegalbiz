{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport graphql from 'src/data/shared/graphql';\nconst query = `\nquery($user_code:String!){\n  users:acc_users_aggregate(\n    where:{\n      user_code:{\n        _eq:$user_code\n      }\n    }\n  ){\n    aggregate { count }\n    nodes {\n      id\n      user_code\n      first_name\n      last_name\n      phone\n      address\n      is_admin\n    }\n  }\n}\n`;\n\nconst jwt = async (token, oAuthProfile) => {\n  try {\n    const variables = {\n      user_code: token.user.email\n    };\n    const {\n      users\n    } = await graphql({\n      query,\n      variables\n    });\n\n    if (users.aggregate.count > 0) {\n      const user = users.nodes[0];\n\n      const claim = _objectSpread({\n        \"https://hasura.io/jwt/claims\": {\n          \"x-hasura-allowed-roles\": [\"admin\", \"user\"],\n          \"x-hasura-default-role\": user.is_admin ? \"admin\" : \"user\",\n          \"x-hasura-user-id\": user.id\n        }\n      }, token);\n\n      return claim;\n    }\n  } catch (e) {\n    return token;\n  }\n};\n\nconst options = {\n  site: process.env.settings.isProd ? `https://${process.env.settings.domain}` : `http://${process.env.settings.domain}`,\n  jwt: {\n    secret: process.env.jwtSecretKey\n  },\n  // Configure one or more authentication providers\n  providers: [Providers.Google({\n    clientId: process.env.auth.google.clientId,\n    clientSecret: process.env.auth.google.clientSecret\n  })],\n  callbacks: {\n    jwt\n  }\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":null,"metadata":{},"sourceType":"module"}