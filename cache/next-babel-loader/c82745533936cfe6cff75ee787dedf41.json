{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport graphql from 'src/data/shared/graphql';\nimport ampify from 'ampify';\nimport { getStaticProps as getRelatedArticles } from './getRelatedArticles';\nconst organizationQuery = `\nquery($domain:String!) {\n  organizations:cms_organizations(\n    where:{\n      domain:{\n        _eq:$domain\n      }\n    }\n  ){\n    id\n    organization_type{\n      id\n      organization_type_name\n    }\n    organization_name\n    face\n    phone\n    zalo\n    youtube_channel\n    mail\n    slug_organization\n    address\n    logo_url\n    twitter\n    wiki_url\n    domain\n  }\n}\n`;\nconst sidebarGroupsQuery = `\nquery($organization_id:uuid!){\n  cms_sidebar_groups(\n    where:{\n      _and:[{\n        active:{\n          _eq:true\n        }\n      }, {\n        organization_id:{\n          _eq:$organization_id\n        }\n      }]\n    },\n    order_by:{\n      position:asc_nulls_last\n    }\n  ){\n    id\n    sidebar_group_name\n    sidebar_menus(\n      order_by:{\n        position:asc_nulls_last\n      }\n    ){\n      id\n      slug_sidebar\n      sidebar_name\n      thumbnail_url\n      is_blank_target\n    }\n  }\n}\n`;\nconst menusQuery = `\nquery($organization_id:uuid!){\n  cms_menus(\n    where:{\n      _and:[{\n        parent_id:{\n          _is_null:true\n        }\n      }, {\n        organization_id:{\n          _eq:$organization_id\n        }\n      }]\n    },\n    order_by:{\n      position:asc_nulls_last  \n    }\n  ){\n    id\n    slug_menu\n    slug:slug_menu\n    title_on_menu\n    title:title_on_menu\n    href\n    reference {\n      id\n      entity_type\n      slug\n    }\n    menus(\n      order_by:{\n        position:asc_nulls_last\n      }\n    ){\n      id\n      slug:slug_menu\n      title_on_menu\n      title:title_on_menu\n      reference {\n        id\n        entity_type\n        slug\n      }\n      href\n    }\n  }\n}\n`;\nconst query = `\nquery($slug:String!,$limit:Int!,$offset:Int!,$locale:String!,$organization_id:uuid!){\n  cms_references(\n    where:{\n      _and:[{\n        organization_id:{\n          _eq:$organization_id\n        }\n      }, {\n        slug:{\n          _eq:$slug\n        }\n      }, {\n        active:{\n          _eq:true\n        }\n      }]\n    }\n  ){\n    id\n    post:article {\n      id\n      title\n      banner\n      img_url\n      intro_text\n      full_text\n      amp_enabled\n      author\n      published_at\n      slug:slug_article\n      category {\n        id\n        slug:slug_category\n        category_name\n      }\n      keywords\n      tags\n    }\n    category {\n      id\n      slug:slug_category\n      category_name\n      banner\n      thumbnail\n      keywords\n      tags\n      total:articles_aggregate(\n        where:{\n          category:{\n            language:{\n              code:{\n                _eq:$locale\n              }\n            }\n          }\n        }        \n      ){\n        aggregate{count}\n      }\n      articles_aggregate(\n        order_by:{\n          published_at:desc_nulls_last\n        },\n        limit:$limit,\n        offset:$offset,\n        where:{\n          category:{\n            language:{\n              code:{\n                _eq:$locale\n              }\n            }\n          }\n        }        \n      ){\n        aggregate { count }\n        nodes {\n          id\n          title\n          banner\n          img_url\n          intro_text\n          full_text\n          author\n          published_at\n          slug:slug_article\n          amp_enabled\n          keywords\n          tags\n          category {\n            id\n            slug:slug_category\n            category_name\n            banner\n            thumbnail\n            keywords\n            tags\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst checkAmp = (validator, html) => {\n  const result = validator.validateString(html);\n  return result.status === 'PASS';\n};\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const length = slug.length;\n  const locale = slug[0];\n  const lastElement = slug[length - 1];\n  const {\n    organizations\n  } = await graphql({\n    query: organizationQuery,\n    variables: {\n      domain: process.env.settings.organization_domain\n    }\n  });\n  const organization = organizations[0];\n  const {\n    cms_sidebar_groups\n  } = await graphql({\n    query: sidebarGroupsQuery,\n    variables: {\n      organization_id: organization.id\n    }\n  });\n  const {\n    cms_menus: menus\n  } = await graphql({\n    query: menusQuery,\n    variables: {\n      organization_id: organization.id\n    }\n  });\n\n  if (locale === 'en' || locale === 'vi') {\n    const currentPage = Number.isInteger(Number(lastElement)) ? slug[length - 1] : 1;\n    const postsPerPage = process.env.postsPerPage;\n    const offset = (currentPage - 1) * process.env.postsPerPage;\n\n    const _slug = Number.isInteger(Number(lastElement)) ? slug.slice(1, length - 2) : slug.slice(1, length);\n\n    try {\n      const tmp = _slug.join('/');\n\n      const variables = {\n        slug: tmp,\n        limit: postsPerPage,\n        offset,\n        locale,\n        organization_id: organization.id\n      };\n      const {\n        cms_references\n      } = await graphql({\n        query,\n        variables\n      });\n      const data = cms_references[0];\n      let meta = {\n        postsPerPage,\n        offset,\n        locale,\n        currentPage,\n        slug: tmp,\n        originalSlug: slug.join('/'),\n        seo: {}\n      };\n\n      if (data.post) {\n        meta.seo = {\n          title: data.post.title\n        };\n\n        try {\n          const {\n            props: {\n              data: {\n                relatedArticlesData: related_articles\n              }\n            }\n          } = await getRelatedArticles({\n            article: data.post\n          });\n          data.post.related_articles = related_articles;\n        } catch (e) {}\n\n        if (data.post.amp_enabled) {\n          const ampText = await ampify(data.post.full_text, {\n            cwd: 'amp'\n          });\n          data.post.amp_full_text = ampText;\n        }\n      }\n\n      if (data.category) {\n        const numberOfPages = Math.ceil(data.category.articles_aggregate.aggregate.count / process.env.postsPerPage);\n        meta.numberOfPages = numberOfPages;\n        meta.seo = {\n          title: data.category.category_name\n        };\n      }\n\n      return {\n        props: {\n          data: _objectSpread(_objectSpread({}, data), {}, {\n            cms_sidebar_groups,\n            organization,\n            menus,\n            meta,\n            settings: process.env.settings\n          }),\n          error: null\n        },\n        unstable_revalidate: 60\n      };\n    } catch (error) {\n      return {\n        props: {\n          data: null,\n          error: {\n            message: 'Error'\n          }\n        }\n      };\n    }\n  } else {\n    const locale = process.env.defaultLocale || 'vi';\n\n    try {\n      const _slug = Number.isInteger(Number(lastElement)) ? slug.slice(0, -1) : slug;\n\n      const currentPage = Number.isInteger(Number(lastElement)) ? lastElement : 1;\n      const offset = (currentPage - 1) * process.env.postsPerPage;\n\n      const tmp = _slug.join('/');\n\n      let meta = {\n        postsPerPage: process.env.postsPerPage,\n        offset,\n        locale,\n        currentPage,\n        slug: tmp,\n        originalSlug: slug.join('/'),\n        seo: {}\n      }; // console.log(JSON.stringify(meta, null, 2))\n\n      const variables = {\n        slug: tmp,\n        limit: process.env.postsPerPage,\n        offset,\n        locale,\n        organization_id: organization.id\n      };\n      const {\n        cms_references\n      } = await graphql({\n        query,\n        variables\n      });\n      const data = cms_references[0];\n\n      if (data.post) {\n        meta.seo = {\n          title: data.post.title\n        };\n\n        try {\n          const {\n            props: {\n              data: {\n                relatedArticlesData: related_articles\n              }\n            }\n          } = await getRelatedArticles({\n            article: data.post\n          });\n          data.post.related_articles = related_articles;\n        } catch (e) {} // data.post.related_articles = related_articles\n\n\n        if (data.post.amp_enabled) {\n          const ampText = await ampify(data.post.full_text, {\n            cwd: 'amp'\n          });\n          data.post.amp_full_text = ampText;\n        }\n      }\n\n      if (data.category) {\n        meta.seo = {\n          title: data.category.category_name\n        };\n        const numberOfPages = Math.ceil(data.category.articles_aggregate.aggregate.count / process.env.postsPerPage) + 1;\n        meta.numberOfPages = numberOfPages;\n      }\n\n      return {\n        props: {\n          data: _objectSpread(_objectSpread({}, data), {}, {\n            cms_sidebar_groups,\n            menus,\n            organization,\n            meta,\n            settings: process.env.settings\n          }),\n          error: null\n        },\n        unstable_revalidate: 60\n      };\n    } catch (error) {\n      return {\n        props: {\n          data: null,\n          error: {\n            message: 'Error'\n          }\n        }\n      };\n    }\n  }\n};\nconst articlesPathQuery = `\nquery($organization_id:uuid!){\n  articles:cms_references(\n    where:{\n      _and:[{\n        active:{\n          _eq:true\n        }\n      }, {\n        entity_type:{\n          _eq:\"article\"\n        }\n      }, {\n        article:{\n          organization_id:{\n            _eq:$organization_id\n          }\n        }\n      }]\n      \n    }\n  ){\n    id\n    slug\n  }\n}\n`;\nconst ampArticlesPathQuery = `\nquery($organization_id:uuid!){\n  articles:cms_references(\n    where:{\n      _and:[{\n        active:{\n          _eq:true\n        }\n      }, {\n        entity_type:{\n          _eq:\"article\"\n        }\n      }, {\n        article: {\n          amp_enabled:{\n            _eq:true\n          }\n        }\n      }, {\n        article:{\n          organization_id:{\n            _eq:$organization_id\n          }\n        }\n      }]\n    }\n  ){\n    id\n    slug\n  }\n}\n`;\nconst categoriesPathQuery = `\nquery($organization_id:uuid!){\n  categories:cms_references(\n    where:{\n      _and:[{\n        active:{\n          _eq:true\n        }\n      }, {\n        entity_type:{\n          _eq:\"category\"\n        }\n      }, {\n        category:{\n          organization_id:{\n            _eq:$organization_id\n          }\n        }\n      }]\n    }\n  ){\n    id\n    slug\n    category {\n      id\n      articles_aggregate {\n        aggregate { count }\n      }\n    }\n  }\n}\n`;\nconst ampCategoriesPathQuery = `\nquery($organization_id:uuid!){\n  categories:cms_references(\n    where:{\n      _and:[{\n        active:{\n          _eq:true\n        }\n      }, {\n        entity_type:{\n          _eq:\"category\"\n        }\n      }, {\n        category:{\n          organization_id:{\n            _eq:$organization_id\n          }\n        }\n      }]\n    }\n  ){\n    id\n    slug\n    category {\n      id\n      articles_aggregate(\n        where:{\n          amp_enabled:{\n            _eq:true\n          }\n        }\n      ){\n        aggregate { count }\n      }\n    }\n  }\n}\n`;\nconst settingsQuery = `\nquery {\n  cms_languages {\n    id\n    code\n    name\n  }\n}\n`;\nexport const getStaticPaths = (isAmp = false) => async () => {\n  const {\n    cms_languages\n  } = await graphql({\n    query: settingsQuery\n  });\n  const locales = cms_languages.map(l => l.code); // const { references } = await graphql({ query: referencesPathQuery })\n\n  const {\n    organizations\n  } = await graphql({\n    query: organizationQuery,\n    variables: {\n      domain: process.env.settings.organization_domain\n    }\n  });\n  const organization = organizations[0];\n  let paths = [];\n  const {\n    articles\n  } = await graphql({\n    query: isAmp ? ampArticlesPathQuery : articlesPathQuery,\n    variables: {\n      organization_id: organization.id\n    }\n  });\n  articles.forEach(r => {\n    let slug = r.slug.split('/');\n    paths.push({\n      params: {\n        slug\n      }\n    });\n    locales.forEach(locale => {\n      slug = `${locale}/${r.slug}`.split('/');\n      paths.push({\n        params: {\n          slug\n        }\n      });\n    });\n  });\n  const {\n    categories\n  } = await graphql({\n    query: isAmp ? ampCategoriesPathQuery : categoriesPathQuery,\n    variables: {\n      organization_id: organization.id\n    }\n  });\n  categories.forEach(c => {\n    if (c.category) {\n      paths.push({\n        params: {\n          slug: c.slug.split('/')\n        }\n      });\n      let i;\n      const numberOfPages = Math.ceil(c.category.articles_aggregate.aggregate.count / process.env.postsPerPage) + 1;\n\n      if (numberOfPages >= 1) {\n        for (i = 1; i <= numberOfPages; i++) {\n          const slug = `${c.slug}/${i}`.split('/');\n          paths.push({\n            params: {\n              slug\n            }\n          });\n        }\n\n        locales.forEach(locale => {\n          paths.push({\n            params: {\n              slug: `${locale}/${c.slug}`.split('/')\n            }\n          });\n          let j;\n\n          for (j = 1; j <= numberOfPages; j++) {\n            const slug = `${locale}/${c.slug}/${j}`.split('/');\n            paths.push({\n              params: {\n                slug\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n  return {\n    paths,\n    fallback: true\n  };\n};","map":{"version":3,"sources":["F:/luatlegalbiz/packages/luatlegalbiz/src/data/slug/index.js"],"names":["graphql","ampify","getStaticProps","getRelatedArticles","organizationQuery","sidebarGroupsQuery","menusQuery","query","checkAmp","validator","html","result","validateString","status","params","slug","length","locale","lastElement","organizations","variables","domain","process","env","settings","organization_domain","organization","cms_sidebar_groups","organization_id","id","cms_menus","menus","currentPage","Number","isInteger","postsPerPage","offset","_slug","slice","tmp","join","limit","cms_references","data","meta","originalSlug","seo","post","title","props","relatedArticlesData","related_articles","article","e","amp_enabled","ampText","full_text","cwd","amp_full_text","category","numberOfPages","Math","ceil","articles_aggregate","aggregate","count","category_name","error","unstable_revalidate","message","defaultLocale","articlesPathQuery","ampArticlesPathQuery","categoriesPathQuery","ampCategoriesPathQuery","settingsQuery","getStaticPaths","isAmp","cms_languages","locales","map","l","code","paths","articles","forEach","r","split","push","categories","c","i","j","fallback"],"mappings":"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","sourcesContent":["import graphql from 'src/data/shared/graphql'\r\nimport ampify from 'ampify'\r\nimport { getStaticProps as getRelatedArticles } from './getRelatedArticles'\r\nconst organizationQuery = `\r\nquery($domain:String!) {\r\n  organizations:cms_organizations(\r\n    where:{\r\n      domain:{\r\n        _eq:$domain\r\n      }\r\n    }\r\n  ){\r\n    id\r\n    organization_type{\r\n      id\r\n      organization_type_name\r\n    }\r\n    organization_name\r\n    face\r\n    phone\r\n    zalo\r\n    youtube_channel\r\n    mail\r\n    slug_organization\r\n    address\r\n    logo_url\r\n    twitter\r\n    wiki_url\r\n    domain\r\n  }\r\n}\r\n`\r\nconst sidebarGroupsQuery = `\r\nquery($organization_id:uuid!){\r\n  cms_sidebar_groups(\r\n    where:{\r\n      _and:[{\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }, {\r\n        organization_id:{\r\n          _eq:$organization_id\r\n        }\r\n      }]\r\n    },\r\n    order_by:{\r\n      position:asc_nulls_last\r\n    }\r\n  ){\r\n    id\r\n    sidebar_group_name\r\n    sidebar_menus(\r\n      order_by:{\r\n        position:asc_nulls_last\r\n      }\r\n    ){\r\n      id\r\n      slug_sidebar\r\n      sidebar_name\r\n      thumbnail_url\r\n      is_blank_target\r\n    }\r\n  }\r\n}\r\n`\r\nconst menusQuery = `\r\nquery($organization_id:uuid!){\r\n  cms_menus(\r\n    where:{\r\n      _and:[{\r\n        parent_id:{\r\n          _is_null:true\r\n        }\r\n      }, {\r\n        organization_id:{\r\n          _eq:$organization_id\r\n        }\r\n      }]\r\n    },\r\n    order_by:{\r\n      position:asc_nulls_last  \r\n    }\r\n  ){\r\n    id\r\n    slug_menu\r\n    slug:slug_menu\r\n    title_on_menu\r\n    title:title_on_menu\r\n    href\r\n    reference {\r\n      id\r\n      entity_type\r\n      slug\r\n    }\r\n    menus(\r\n      order_by:{\r\n        position:asc_nulls_last\r\n      }\r\n    ){\r\n      id\r\n      slug:slug_menu\r\n      title_on_menu\r\n      title:title_on_menu\r\n      reference {\r\n        id\r\n        entity_type\r\n        slug\r\n      }\r\n      href\r\n    }\r\n  }\r\n}\r\n`\r\nconst query = `\r\nquery($slug:String!,$limit:Int!,$offset:Int!,$locale:String!,$organization_id:uuid!){\r\n  cms_references(\r\n    where:{\r\n      _and:[{\r\n        organization_id:{\r\n          _eq:$organization_id\r\n        }\r\n      }, {\r\n        slug:{\r\n          _eq:$slug\r\n        }\r\n      }, {\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }]\r\n    }\r\n  ){\r\n    id\r\n    post:article {\r\n      id\r\n      title\r\n      banner\r\n      img_url\r\n      intro_text\r\n      full_text\r\n      amp_enabled\r\n      author\r\n      published_at\r\n      slug:slug_article\r\n      category {\r\n        id\r\n        slug:slug_category\r\n        category_name\r\n      }\r\n      keywords\r\n      tags\r\n    }\r\n    category {\r\n      id\r\n      slug:slug_category\r\n      category_name\r\n      banner\r\n      thumbnail\r\n      keywords\r\n      tags\r\n      total:articles_aggregate(\r\n        where:{\r\n          category:{\r\n            language:{\r\n              code:{\r\n                _eq:$locale\r\n              }\r\n            }\r\n          }\r\n        }        \r\n      ){\r\n        aggregate{count}\r\n      }\r\n      articles_aggregate(\r\n        order_by:{\r\n          published_at:desc_nulls_last\r\n        },\r\n        limit:$limit,\r\n        offset:$offset,\r\n        where:{\r\n          category:{\r\n            language:{\r\n              code:{\r\n                _eq:$locale\r\n              }\r\n            }\r\n          }\r\n        }        \r\n      ){\r\n        aggregate { count }\r\n        nodes {\r\n          id\r\n          title\r\n          banner\r\n          img_url\r\n          intro_text\r\n          full_text\r\n          author\r\n          published_at\r\n          slug:slug_article\r\n          amp_enabled\r\n          keywords\r\n          tags\r\n          category {\r\n            id\r\n            slug:slug_category\r\n            category_name\r\n            banner\r\n            thumbnail\r\n            keywords\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst checkAmp = (validator, html) => {\r\n  const result = validator.validateString(html)\r\n  return result.status === 'PASS'\r\n}\r\nexport const getStaticProps = async ({ params }) => {\r\n  const { \r\n    slug \r\n  } = params\r\n  const length = slug.length\r\n  const locale = slug[0]\r\n  const lastElement = slug[length - 1]\r\n  const { organizations } = await graphql({ query: organizationQuery, variables: { domain: process.env.settings.organization_domain } })\r\n  const organization = organizations[0]\r\n  const { cms_sidebar_groups } = await graphql({ query: sidebarGroupsQuery, variables: { organization_id: organization.id } })\r\n  const { cms_menus: menus } = await graphql({ query: menusQuery, variables: { organization_id: organization.id } })\r\n  if (locale === 'en' || locale === 'vi') {\r\n    const currentPage = Number.isInteger(Number(lastElement)) ? slug[length - 1] : 1\r\n    const postsPerPage = process.env.postsPerPage\r\n    const offset = (currentPage - 1) * process.env.postsPerPage\r\n    const _slug = Number.isInteger(Number(lastElement)) ? slug.slice(1, length - 2) : slug.slice(1, length)\r\n    try {\r\n      const tmp = _slug.join('/')\r\n      const variables = { slug: tmp, limit: postsPerPage, offset, locale, organization_id: organization.id }\r\n      const { cms_references } = await graphql({ query, variables })\r\n      const data = cms_references[0]\r\n      let meta = {\r\n        postsPerPage,\r\n        offset,\r\n        locale,\r\n        currentPage,\r\n        slug: tmp,\r\n        originalSlug: slug.join('/'),\r\n        seo: {}\r\n      }\r\n      if (data.post) {\r\n        \r\n        meta.seo = {\r\n          title: data.post.title\r\n        }        \r\n        try {\r\n          const { props: { data: { relatedArticlesData: related_articles }}} = await getRelatedArticles({ article: data.post })\r\n          data.post.related_articles = related_articles\r\n        } catch (e) {\r\n        }\r\n        \r\n        if (data.post.amp_enabled) {\r\n          const ampText = await ampify(data.post.full_text, {cwd: 'amp'})\r\n          data.post.amp_full_text = ampText\r\n        }\r\n      }\r\n      \r\n      if (data.category) {\r\n        const numberOfPages = Math.ceil(data.category.articles_aggregate.aggregate.count / process.env.postsPerPage)\r\n        meta.numberOfPages = numberOfPages\r\n        meta.seo = {\r\n          title: data.category.category_name\r\n        }\r\n      }\r\n      return {\r\n        props: {                \r\n          data: {\r\n            ...data,\r\n            cms_sidebar_groups,\r\n            organization,\r\n            menus,\r\n            meta,\r\n            settings: process.env.settings\r\n          },\r\n          error: null,\r\n        },\r\n        unstable_revalidate: 60\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        props: {\r\n          data: null,\r\n          error: { message: 'Error' }\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    const locale = process.env.defaultLocale || 'vi'\r\n    try {\r\n      const _slug = Number.isInteger(Number(lastElement)) ? slug.slice(0, -1) : slug      \r\n      const currentPage = Number.isInteger(Number(lastElement)) ? lastElement : 1\r\n      const offset = (currentPage - 1) * process.env.postsPerPage\r\n      const tmp = _slug.join('/')\r\n      let meta = {\r\n        postsPerPage: process.env.postsPerPage,\r\n        offset,\r\n        locale,\r\n        currentPage,\r\n        slug: tmp,\r\n        originalSlug: slug.join('/'),\r\n        seo : {}\r\n      }\r\n      // console.log(JSON.stringify(meta, null, 2))\r\n      const variables = { slug: tmp, limit: process.env.postsPerPage, offset, locale, organization_id: organization.id }\r\n      const { cms_references } = await graphql({ query, variables })\r\n\r\n      const data = cms_references[0]\r\n      if (data.post) {\r\n        meta.seo = {\r\n          title: data.post.title\r\n        }\r\n        try {\r\n          const { props: { data: { relatedArticlesData: related_articles }}} = await getRelatedArticles({ article: data.post })\r\n          data.post.related_articles = related_articles\r\n        } catch (e) {\r\n        }\r\n        \r\n        // data.post.related_articles = related_articles\r\n        if (data.post.amp_enabled) {\r\n          const ampText = await ampify(data.post.full_text, {cwd: 'amp'})\r\n          data.post.amp_full_text = ampText\r\n        }\r\n      }\r\n      if (data.category) {\r\n        meta.seo = {\r\n          title: data.category.category_name\r\n        }\r\n        const numberOfPages = Math.ceil(data.category.articles_aggregate.aggregate.count / process.env.postsPerPage) + 1 \r\n        meta.numberOfPages = numberOfPages\r\n      }\r\n      \r\n      return {\r\n        props: {                \r\n          data: {\r\n            ...data,\r\n            cms_sidebar_groups,\r\n            menus,\r\n            organization,\r\n            meta,\r\n            settings: process.env.settings\r\n          },\r\n          error: null,\r\n        },\r\n        unstable_revalidate: 60\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        props: {\r\n          data: null,\r\n          error: { message: 'Error' }\r\n        }\r\n      }\r\n    }\r\n  }    \r\n}\r\nconst articlesPathQuery = `\r\nquery($organization_id:uuid!){\r\n  articles:cms_references(\r\n    where:{\r\n      _and:[{\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }, {\r\n        entity_type:{\r\n          _eq:\"article\"\r\n        }\r\n      }, {\r\n        article:{\r\n          organization_id:{\r\n            _eq:$organization_id\r\n          }\r\n        }\r\n      }]\r\n      \r\n    }\r\n  ){\r\n    id\r\n    slug\r\n  }\r\n}\r\n`\r\nconst ampArticlesPathQuery = `\r\nquery($organization_id:uuid!){\r\n  articles:cms_references(\r\n    where:{\r\n      _and:[{\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }, {\r\n        entity_type:{\r\n          _eq:\"article\"\r\n        }\r\n      }, {\r\n        article: {\r\n          amp_enabled:{\r\n            _eq:true\r\n          }\r\n        }\r\n      }, {\r\n        article:{\r\n          organization_id:{\r\n            _eq:$organization_id\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  ){\r\n    id\r\n    slug\r\n  }\r\n}\r\n`\r\n\r\nconst categoriesPathQuery = `\r\nquery($organization_id:uuid!){\r\n  categories:cms_references(\r\n    where:{\r\n      _and:[{\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }, {\r\n        entity_type:{\r\n          _eq:\"category\"\r\n        }\r\n      }, {\r\n        category:{\r\n          organization_id:{\r\n            _eq:$organization_id\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  ){\r\n    id\r\n    slug\r\n    category {\r\n      id\r\n      articles_aggregate {\r\n        aggregate { count }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst ampCategoriesPathQuery = `\r\nquery($organization_id:uuid!){\r\n  categories:cms_references(\r\n    where:{\r\n      _and:[{\r\n        active:{\r\n          _eq:true\r\n        }\r\n      }, {\r\n        entity_type:{\r\n          _eq:\"category\"\r\n        }\r\n      }, {\r\n        category:{\r\n          organization_id:{\r\n            _eq:$organization_id\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  ){\r\n    id\r\n    slug\r\n    category {\r\n      id\r\n      articles_aggregate(\r\n        where:{\r\n          amp_enabled:{\r\n            _eq:true\r\n          }\r\n        }\r\n      ){\r\n        aggregate { count }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\nconst settingsQuery = `\r\nquery {\r\n  cms_languages {\r\n    id\r\n    code\r\n    name\r\n  }\r\n}\r\n`\r\nexport const getStaticPaths = (isAmp = false) => async () => {\r\n  const { cms_languages } = await graphql({ query: settingsQuery })\r\n  const locales = cms_languages.map(l => l.code)\r\n  // const { references } = await graphql({ query: referencesPathQuery })\r\n  const { organizations } = await graphql({ query: organizationQuery, variables: { domain: process.env.settings.organization_domain } })\r\n  const organization = organizations[0]\r\n  let paths = []\r\n  const { articles } = await graphql({ query: (isAmp ? ampArticlesPathQuery : articlesPathQuery), variables: { organization_id: organization.id } })\r\n  articles.forEach(r => {\r\n    let slug = r.slug.split('/')\r\n    paths.push({ params: { slug }})\r\n    locales.forEach(locale => {\r\n      slug = `${locale}/${r.slug}`.split('/')\r\n      paths.push({\r\n        params: {\r\n          slug\r\n        }\r\n      })      \r\n    })\r\n  })\r\n  const { categories } = await graphql({ query: (isAmp ? ampCategoriesPathQuery : categoriesPathQuery), variables: { organization_id: organization.id } })\r\n  categories.forEach(c => {\r\n    if (c.category) {\r\n      paths.push({\r\n        params: {\r\n          slug: c.slug.split('/')\r\n        }\r\n      })\r\n      let i\r\n      \r\n      const numberOfPages = Math.ceil(c.category.articles_aggregate.aggregate.count / process.env.postsPerPage) + 1\r\n      if (numberOfPages >= 1) {\r\n        for(i = 1; i <= numberOfPages; i++) {\r\n          const slug = `${c.slug}/${i}`.split('/')\r\n          paths.push({\r\n            params: { slug }\r\n          })\r\n        }\r\n        locales.forEach(locale => {\r\n          paths.push({\r\n            params: {\r\n              slug: `${locale}/${c.slug}`.split('/')\r\n            }\r\n          })\r\n          let j\r\n          for(j = 1; j <= numberOfPages; j++) {\r\n            const slug = `${locale}/${c.slug}/${j}`.split('/')\r\n            paths.push({\r\n              params: { slug }\r\n            })\r\n          }\r\n        })\r\n      }      \r\n    }    \r\n  })\r\n  return {\r\n    paths,\r\n    fallback: true,\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}